openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MARKMIND14/markmind-api-v0/1.0.0
info:
  title: MarkMind API v0
  version: "1.0.0"
  contact:
    email: markmind14@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: teachers
    description: operations available to teachers
  - name: students
    description: operations available to students

paths:
# teacher mode
  /api/teacher/dashboard:
    get:
      tags:
        - teachers
      summary: retreive dashboard data for a teacher
      description: fetches summary information, notifications, and other data needed to render the teacher's dashboard
      operationId: get_teacher_dashboard
      responses:
        '200':
          description: successfully retrieved data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeacherDashboardData'
        '404':
          description: resource not found
      
  /api/teacher/classes:
    get:
      tags:
        - teachers
      summary: fetch all available teacher classes
      description: fetches teacher class list to choose from when setting assingnment
      operationId: get_teacher_classes
      responses:
        '200':
          description: list of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        '204':
          description: no classes available
        '500':
          description: internal server error
          
  /api/teacher/assignments:
    post:
      tags: 
      - teachers
      summary: create a new assignment
      description: create a new assignment for a specific class, specifying questions and mark schemes
      operationId: create_assignment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
      responses:
        '201':
          description: assignment created
        '400':
          description: invalid request format or missing required fields
        '404':
          description: the specified class does not exist
        '500':
          description: internal server error
    get:
      tags:
      - teachers
      summary: fetch all created assignments
      description: fetch the full list of  assignments set by the teacher and their associated data, filtering as required
      operationId: get_teacher_assignments
      parameters: 
        - in: query
          name: isCompleted
          schema:
            type: boolean
          required: false
          description: optional filter for assignments that are completed or not
        - in: query
          name: classId
          schema:
            type: string
          required: false
          description: optional filter for assignments for a specific class
        # - in: query
        #   name: dueDate
        #   schema:
        #     type: string
        #     format: date
        #   required: false
        #   description: optional filter for assignments due by a certain date
      responses:
        '200':
          description: a list of assignments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        '400':
          description: invalid query parameters
        '404':
          description: no assignments found matching query critera
        '500':
          description: internal server error

# student
  /api/student/dashboard:
    get:
      tags:
        - students
      summary: retreive dashboard data for a student
      description: fetches summary information, notifications, and other data needed to render the student's dashboard
      operationId: get_student_dashboard
      responses:
        '200':
          description: successfully retrieved data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentDashboardData'
        '404':
          description: resource not found
  
  /api/student/classes:
    get:
      tags:
        - students
      summary: fetch all available student classes
      description: fetches student class list to choose from when viewing assingnment
      operationId: get_student_classes
      responses:
        '200':
          description: list of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        '204':
          description: no classes available
        '500':
          description: internal server error
  
  /api/student/assignments:
    post:
      tags: 
      - teachers
      summary: submit an assignment
      description: submit an answer to an assignment for a specific class
      operationId: submit_assignment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
              
      responses:
        '201':
          description: assignment created
        '400':
          description: invalid request format or missing required fields
        '404':
          description: the specified class does not exist
        '500':
          description: internal server error
    get:
      tags:
      - students
      summary: fetch all student assignments
      description: fetch the full list of assignments set for the student and their associated data, filtering as required
      operationId: get_student_assignments
      parameters: 
        - in: query
          name: isDue
          schema:
            type: string
            format: date
          required: false
          description: optional filter for assignments due by a certain date 
        - in: query
          name: classId
          schema:
            type: string
          required: false
          description: optional filter for assignments for a specific class
        # - in: query
        #   name: dueDate
        #   schema:
        #     type: string
        #     format: date
        #   required: false
        #   description: optional filter for assignments due by a certain date
      responses:
        '200':
          description: a list of assignments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        '400':
          description: invalid query parameters
        '404':
          description: no assignments found matching query critera
        '500':
          description: internal server error
  
      # parameters:
      #   - in: query
      #     name: searchString
      #     description: pass an optional search string for looking up inventory
      #     required: false
      #     schema:
      #       type: string
      #   - in: query
      #     name: skip
      #     description: number of records to skip for pagination
      #     schema:
      #       type: integer
      #       format: int32
      #       minimum: 0
      #   - in: query
      #     name: limit
      #     description: maximum number of records to return
      #     schema:
      #       type: integer
      #       format: int32
      #       minimum: 0
      #       maximum: 50
  
# components (teacher and student)
components:
  schemas:
    TeacherDashboardData:
      type: object
      properties:
        summaryInfo:
          type: object
          properties:
            totalTeacherClasses:
              type: integer
            totalTeacherAssignments:
              type: integer
            upcomingTeacherDeadlines:
              type: integer
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
          # ...
      required: 
        - summaryInfo
        - notifications
        
    StudentDashboardData:
      type: object
      properties:
        summaryInfo:
          type: object
          properties:
            totalStudentClasses:
              type: integer
            totalStudentAssignments:
              type: integer
            upcomingStudentDeadlines:
              type: integer
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
          # ...
      required: 
        - summaryInfo
        - notifications
        
    Class:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required: 
        - id
        - name
        
    Assignment:
      type: object
      properties:
        assignmentId:
          type: integer
        classId:
          type: integer
        questions:
          type: array
          items:
            type: string
            description: list of questions
        markSchemes:
          type: array
          items:
            type: string
            description: list of mark schemes
      required:
        - assignmentId
        - classId
        - questions
        - markSchemes
        
    Submission:
      type: object
      properties:
        assignmentId:
          type: integer
          description: unique identifier of the assignment answered
        classId:
          type: integer
          description: unique identifier of the class for which the assignment is created
        answer:
          type: array
          items:
            type: string
          description: submitted answer to the question set
      required:
        - assignmentId
        - classId
        - answer
        
    Notification:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        message:
          type: string
    #       type: string
    #       format: uuid
    #       example: d290f1ee-6c54-4b01-90e6-d701748f0851
    #     name:
    #       type: string
    #       example: Widget Adapter
    #     releaseDate:
    #       type: string
    #       format: date-time
    #       example: '2016-08-29T09:12:33.001Z'
    #     manufacturer:
    #       $ref: '#/components/schemas/Manufacturer'
    # Manufacturer:
    #   required:
    #     - name
    #   properties:
    #     name:
    #       type: string
    #       example: ACME Corporation
    #     homePage:
    #       type: string
    #       format: url
    #       example: 'https://www.acme-corp.com'
    #     phone:
    #       type: string
    #       example: 408-867-5309
    #   type: object