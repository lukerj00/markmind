openapi: 3.0.0
info:
  title: MarkMind EdTech Platform API
  version: 1.0.0
  description: API for interacting with the MarkMind EdTech platform for both teachers and students.

servers:
  - url: https://api.markmind_url.com/

paths:
  /auth/register:
   post:
   - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
     summary: Register a new user
     parameters:
       - in: header # included as example; omitted from all other endpoints
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
     requestBody:
       required: true
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/UserRegistration'
     responses:
       '201':
         description: User registered successfully
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/UserRegistrationResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
   post:
     summary: Authenticate a user and generate an authentication token
     requestBody:
       required: true
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/UserLogin'
     responses:
       '200':
         description: Authentication successful
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/AuthenticationResponse'

  # /auth/change-password: # not required for MVP
  #  post:
  #    summary: Change user's password
  #    security:
  #      - bearerAuth: [] # arbitrary string denoting bearer token authentication (random string representing user's authorization to access protected resources), included in HTTP header (form 'Authorization: Bearer <access-token>')
  #    requestBody:
  #      required: true
  #      content:
  #        application/json:
  #          schema:
  #            $ref: '#/components/schemas/ChangePasswordResponse'
  #    responses:
  #      '200':
  #        description: Password changed successfully

  /auth/logout:
    post:
      summary: Logout user and invalidate authentication token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
  
  /teachers/{teacherId}/profile:
    get:
      summary: Get teacher profile
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: teacherId
          required: true
          schema:
            type: integer
          description: Unique identifier of the teacher
      responses:
        '200':
          description: Teacher profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Teacher not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    # put: # ignore for mvp
    #   summary: Update teacher profile
    #   security:
    #     - bearerAuth: []
    #   parameters:
    #     - in: path
    #       name: teacherId
    #       required: true
    #       schema:
    #         type: integer
    #       description: Unique identifier of the teacher
    #   requestBody:
    #     required: true
    #     content:
    #       multipart/form-data: # application/json:
    #         schema:
    #           $ref: '#/components/schemas/UpdateTeacherProfileRequest'
    #   responses:
    #     '200':
    #       description: Teacher profile updated successfully
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/TeacherProfileResponse'
    #     '400':
    #       description: Invalid input
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorResponse'
    #     '404':
    #       description: Teacher not found
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorResponse'

  /teachers/{teacherId}/dashboard:
    get:
      summary: Get the teacher's dashboard
      description: Retrieve information for the teacher's dashboard.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: teacherId
          required: true
          schema:
            type: integer
          description: Unique identifier of the teacher
      responses:
        '200':
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherDashboardResponse'

  # (removed endpoint for GET assignment creation form)

  /teachers/{teacherId}/assignments:
    post:
      summary: Submit a new assignment
      description: Create a new assignment with details.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: teacherId 
          required: true
          schema:
            type: integer
          description: Unique identifier of the teacher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAssignmentRequest'
      responses:
        '201':
          description: Assignment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentResponse'
    # (removed PUT functionality to change assignment details)

  /teachers/{teacherId}/classrooms:
    get:
      summary: View classrooms managed by the teacher
      description: Retrieve a list of classrooms that the teacher is managing.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: teacherId
          required: true
          schema:
            type: integer
          description: Unique identifier of the teacher
      responses:
        '200':
          description: List of classrooms retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassroomSummary'

  /teachers/{teacherId}/classrooms/{classroomId}/assignments:
    get:
      summary: View assignments for a classroom
      description: Retrieve a list of assignments for a specific classroom.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: teacherId
          required: true
          schema:
            type: integer
          description: Unique identifier of the teacher
        - in: path
          name: classroomId
          required: true
          schema:
            type: integer
          description: Unique identifier of the classroom
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number of the results to retrieve
        - in: query
          name: pageSize
          schema:
            type: integer
            enum: [10, 25, 50, 100]
            default: 10
          description: Number of submissions to retrieve per page
      responses:
        '200':
          description: List of assignments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentSummary' # AssignmentDetails
                  meta: # pagination metadata
                      $ref: '#/components/schemas/PaginationMeta'

  /teachers/{teacherId}/assignments/{assignmentId}:
    get:
      summary: view and edit assignment details
      description: Retrieve details of a specific assignment, then view and edit assignment details.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Assignment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherAssignmentDetails'
        '404':
          description: Assignment not found
  # (removed PUT functionality to change assignment details)
             
    /teachers/{teacherId}/assignments/{assignmentId}/submissions: # eg /teachers/123/assignments/456/submissions?page=2&pageSize=10 ( {url_path}?{query_key}={query_value}&{query_key}={query_value} )
    get:
      summary: View submissions for an assignment
      description: Retrieve a paginated list of submissions for a specific assignment.
      security:
       - bearerAuth: []
      parameters:
        - in: path # ie specified in endpoint path
          name: teacherId
          required: true
          schema:
            type: integer
          description: Unique identifier of the teacher
        - in: path
          name: assignmentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the assignment
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number of the results to retrieve
        - in: query
          name: pageSize
          schema:
            type: integer
            enum: [10, 25, 50, 100]
            default: 10
          description: Number of submissions to retrieve per page
      # add PUT functionality (to update assignment before due date) at later stage
      responses:
        '200':
          description: List of submissions retrieved successfully
          content:
            application/json:
              schema:
                type: object # response object which contains two properties, data and meta
                properties:
                  data:
                    type: array # array of SubmissionSummary objects
                    items:
                      $ref: '#/components/schemas/SubmissionSummary'
                  meta: # pagination metadata info
                    $ref: '#/components/schemas/PaginationMeta'
        '400':
          description: Bad request (ie past due date / missing fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /teachers/{teacherId}/submissions/{submissionId}:
    get:
      summary: View a student's submission
      description: Retrieve details of a student's submission including any AI-generated feedback.
      security:
       - bearerAuth: []
      responses:
        '200':
          description: Submission details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherSubmissionDetails'

  /teachers/{teacherId}/submissions/{submissionId}/feedback:
    get:
      summary: Get AI-generated feedback for a submission
      description: Retrieve AI-generated feedback on various categories (e.g. spelling/punctuation, formatting, etc.)
      security:
       - bearerAuth: []
      parameters:
        - in: query
            name: question
            required: true
            schema:
              type: string
            description: question to filter by
        - in: query
          name: category
          required: true
          schema:
            type: string
          description: Feedback category to filter by (e.g. spelling/punctuation, formatting, etc.)
      responses:
        '200':
          description: Feedback retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIFeedback'
        '404':
          description: Feedback not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /teachers/{teacherId}/submissions/{submissionId}/grade:
    post:
      summary: Grade a submission
      description: Submit final grade and feedback for a student's submission.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: teacherId
          required: true
          schema:
            type: integer
          description: Unique identifier of the teacher
        - in: path
          name: submissionId
          required: true
          schema:
            type: integer
          description: Unique identifier of the submission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GradeInputRequest'
      responses:
        '200':
          description: Grade and feedback submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradeResponse'

  # Student stuff
  /students/{studentId}/profile:
    get:
      summary: Get student profile
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the student
      responses:
        '200':
          description: Student profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    # put: # not required for MVP
    #   summary: Update student profile
    #   security:
    #     - bearerAuth: []
    #   parameters:
    #     - in: path
    #       name: studentId
    #       required: true
    #       schema:
    #         type: integer
    #       description: Unique identifier of the student
    #   requestBody:
    #     required: true
    #     content:
    #       multipart/form-data: # 'multipart-payload, eg for submitting form data that includes file uploads'
    #         schema:
    #           $ref: '#/components/schemas/UpdateStudentProfileRequest'
    #   responses:
    #     '200':
    #       description: Student profile updated successfully
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/StudentProfileResponse'
    #     '400':
    #       description: Invalid input
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorResponse'
    #     '404':
    #       description: Student not found
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorResponse'

  /students/{studentId}/dashboard:
    get:
      summary: Get the student's dashboard
      description: Retrieve information for the student's dashboard, including upcoming assignments and recent grades.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the student
      responses:
        '200':
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDashboardResponse'

  /students/{studentId}/classrooms:
    get:
      summary: View classrooms the student is enrolled in
      description: Retrieve a list of classrooms the student is enrolled in.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the student
      responses:
        '200':
          description: List of classrooms retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassroomSummary'

  /students/{studentId}/classrooms/{classroomId}/assignments:
    get:
      summary: View assignments for a specific classroom
      description: Retrieve a list of assignments for the student in a specific classroom.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the student
        - in: path
          name: classroomId
          required: true
          schema:
            type: integer
          description: Unique identifier of the classroom
      responses:
        '200':
          description: List of assignments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssignmentSummary' # Summary not Details

  /students/{studentId}/assignments/{assignmentId}:
    get:
      summary: View details of a specific assignment
      description: Retrieve details of a specific assignment, including description and due date.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the student
        - in: path
          name: assignmentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the assignment
      responses:
        '200':
          description: Assignment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentAssignmentDetails'

  /students/{studentId}/assignments/{assignmentId}/submissions:
    post:
      summary: Submit an assignment
      description: Allows a student to submit their completed assignment (including file uploads).
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the student
        - in: path
          name: assignmentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the assignment
      requestBody:
        required: true
        content:
          multipart/form-data: # application/json:
            schema:
              $ref: '#/components/schemas/AssignmentSubmissionRequest'
      responses:
        '201':
          description: Assignment submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentSubmissionResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /students/{studentId}/grades:
    get:
      summary: View all grades for the student
      description: Retrieve a summary of all grades the student has received across all enrolled classrooms.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the student
        - in: query
          name: assignmentTitle
          schema:
            type: string
          description: Filter grades by assignment title.
        - in: query
          name: classroomName # (match to id on backend?)
          schema:
            type: string
          description: Filter grades by classroom.
        - in: query
          name: endDate # removed filter by start date
          schema:
            type: string
            format: date
          description: Filter grades by end date (inclusive).
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number of the results to retrieve
        - in: query
          name: pageSize
          schema:
            type: integer
            enum: [10, 25, 50, 100]
            default: 10
          description: Number of submissions to retrieve per page
      responses:
        '200':
          description: Grades summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GradeSummary'
                  meta: # pagination metadata info
                    $ref: '#/components/schemas/PaginationMeta'

# (removed endpoint for teacher to view grades for specific classroom)

  /students/{studentId}/assignments/{assignmentId}/grade:
    get:
      summary: View grade for a specific assignment
      description: Retrieve the grade for a specific assignment.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the student
        - in: path
          name: assignmentId
          required: true
          schema:
            type: integer
          description: Unique identifier of the assignment
      responses:
        '200':
          description: Assignment grade retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentGrade'

components:
  # security scheme
  securitySchemes:
   bearerAuth:
     type: http
     scheme: bearer # ie bearer token should be included in the Authorization header using the format: Bearer <token>

  schemas:
    
    # user registration/login/authentification stuff

    UserRegistration: # POST request for new user. later add in bio/DOB/phone no/profile pic
     type: object
     properties:
       userId:
         type: integer
       title:
         type: string # or 'enum'
       firstName:
         type: string
       lastName:
         type: string
       email:
         type: string
       password:
         type: string # note HASHED
       role:
         type: string
         enum: [student, teacher]
       required: # example required fields, omitted for all other objects for brevity
        - firstName
        - lastName
        - email
        - password
        - role
    
    UserRegistrationResponse: # 201 response for registration
     type: object
     properties:
       firstName:
         type: string
       lastName:
         type: string
       email:
         type: string
       password:
         type: string
       role:
         type: string
         enum: [student, teacher]

    UserLogin: # POST request to authenticate user/generate login token
     type: object
     properties:
       email:
         type: string
       password:
         type: string

    # ChangePasswordResponse: # POST request to change pw
    #  type: object
    #  properties:
    #    oldPassword:
    #      type: string
    #    newPassword:
    #      type: string

    AuthenticationResponse: # 200 response to authentification
     type: object
     properties:
       token:
         type: string
       userId:
         type: integer

    # profile stuff

    TeacherProfileResponse: # 200 response for retrieving teacher profile
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [student, teacher]

    # UpdateTeacherProfileRequest: # PUT request to update teacher profile (not required for MVP)
    #   type: object
    #   properties:
    #     firstName:
    #       type: string
    #     lastName:
    #       type: string
    #     email:
    #       type: string
    #     password:
    #       type: string
    #     role:
    #       type: string
    #       enum: [student, teacher]

    StudentProfileResponse: # 200 response for retrieving student profile
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [student, teacher]

    # UpdateStudentProfileRequest: # PUT request to update student profile (not required for MVP)
    #   type: object
    #   properties:
    #     firstName:
    #       type: string
    #     lastName:
    #       type: string
    #     email:
    #       type: string
    #     password:
    #       type: string
    #     role:
    #       type: string
    #       enum: [student, teacher]

    StudentDashboardResponse: # 200 response for retrieving student dashboard data
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        classSummaries:
          type: array
          items:
            $ref: '#/components/schemas/StudentClassSummary'

    # teacher stuff

    NewAssignmentRequest: # POST request to submit new assignment
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        dueDate:
          type: string
          format: date-time
        assignmentDetails:
          type: array
          items:
            $ref: '#/components/schemas/AssignmentDetails'

    AssignmentResponse: # 200 response to creating assignment
      type: object
      properties:
        assignmentId: # useful for teacher to reference
          type: integer
        message:
          type: string

    ClassroomSummary: # 200 response to requesting list of teacher or student classrooms
      type: object
      properties:
        classroomId:
          type: integer
        name:
          type: string

    AssignmentSummary: # 200 response to teacher/student request to retrieve list of assignments, and forms part of AssignmentDetails metadata
      type: object
      properties:
        assignmentId:
          type: integer
        title:
          type: string
        dueDate:
          type: string
          format: date

    TeacherAssignmentDetails: # 200 response to teacher requesting to view/edit assignment
      allOf:
        - $ref: '#/components/schemas/AssignmentSummary'
        - type: object
          properties:
            questions:
              type: array
              items:
                $ref: '#/components/schemas/Question'
            # content:
            #   type: string
            markSchemes:
              type: array
              items:
                $ref: '#/components/schemas/MarkScheme'

    TeacherSubmissionSummary: # 200 response to teacher requesting list of student submissions (note decision between using array-containing object vs array of objects as response, eg StudentDashboardResponse)
      type: object
      properties:
        submissionId:
          type: integer
        studentId:
          type: integer
        submittedAt:
          type: string
          format: date-time
        # status: # implement with frontend logic ?
        #   type: string
        #   enum: [submitted, not_submitted, late]

    TeacherSubmissionDetails: # 200 response to teacher requesting to view details (questions, answers, teacher/AI feedback) for an assignment
      allOf:
        - $ref: '#/components/schemas/TeacherSubmissionSummary'
        - type: object
            teacherOverallFeedback:
              $ref: '#/components/schemas/FeedbackItem'
        - type: object # array of question/answer/markscheme/feedback
            questions:
              type: array
              items:
                $ref: '#/components/schemas/SubmissionQuestion'

    SubmissionQuestion: # (used in TeacherSubmissionDetails object)
      type: object
      properties:
        question:
          $ref: '#/components/schemas/Question'
        studentAnswer:
          $ref: '#/components/schemas/Answer'
        markScheme:
          $ref: '#/components/schemas/MarkScheme'
        teacherFeedback:
          $ref: '#/components/schemas/FeedbackItem'
        aiFeedback:
          $ref: '#/components/schemas/AIFeedback'

    # student stuff 
    
    AssignmentSubmissionRequest: # POST request to submit assignment
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        files:
          type: array
          items:
            type: string

    AssignmentSubmissionResponse: # 201 response to submitting assignment
      type: object
      properties:
        submissionId:
          type: integer
        message:
          type: string
        status:
          type: string
          enum: [on_time, late]

    GradeInputRequest: # POST request to grade a submission
      type: object
      properties:
        overallFeedback:
          $ref: '#/components/schemas/FeedbackItem'
        questionFeedback:
          type: array
          items:
            type: object
            properties:
              teacherFeedback:
                $ref: '#/components/schemas/FeedbackItem'
              aiFeedback:
                $ref: '#/components/schemas/AIFeedback'

    GradeResponse: # 200 response to grading a submission
      type: object
      properties:
        # gradeId:
        #   type: integer
        message:
          type: string

    StudentAssignmentDetails: # 200 response to student requesting to view assignment
      allOf:
        - $ref: '#/components/schemas/AssignmentSummary'
        - type: object
          properties:
            questions:
              type: array
              items:
                $ref: '#/components/schemas/Question'

    GradeSummary: # 200 response to student/teacher requesting to view grades
      type: object
      properties:
        assignmentId:
          type: integer
        title:
          type: string
        score:
          type: number
        feedback:
          type: string

    AssignmentGrade: # 200 response to student requesting to view grade/feedback for a specific assignment
      type: object
      properties:
        gradeSummary:
          $ref: '#/components/schemas/GradeSummary'
        questionFeedback:
          type: array
          items:
            type: object
            properties:
              teacherFeedback:
                $ref: '#/components/schemas/FeedbackItem'
              aiFeedback:
                $ref: '#/components/schemas/AIFeedback'

    # shared teacher/student components

    Question:
      type: object
      properties:
        questionId:
          type: integer
        text:
          type: string
        order:
          type: integer

    Answer:
      type: object
      properties:
        answerId:
          type: integer
        text:
          type: string
        order:
          type: integer

    MarkScheme:
      type: object
      properties:
        questionId:
          type: integer
        marks:
          type: integer
        type: array
        properties:
          criteria:
            type: string

    AIFeedback:
      type: object
      properties:
        submissionId:
          type: integer
        feedback:
          type: array # string
          items:
            $ref: '#/components/schemas/FeedbackItem'

    FeedbackItem:
      type: object
      properties:
        feedbackText:
          type: string
        Mark:
          type: integer
    
    StudentClassSummary: # (used in StudentDashboardResponse object)
      type: object
      properties:
        classId:
          type: integer
        latestGrade:
          type: number
          format: float
        averageGrade:
          type: number
          format: float
        attendanceRate:
          type: number
          format: float
        upcomingDeadlines:
          type: integer

    # misc

    PaginationMeta:
      type: object
      properties:
        currentPage:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
